function isGraph(t){return null!==t&&"object"==typeof t&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode&&"boolean"==typeof t.multi}function copyNode(t,e,o){return o=Object.assign({},o),t.addNode(e,o)}function copyEdge(t,e,o,n,r,i){return(i=Object.assign({},i),e)?null==o?t.addUndirectedEdge(n,r,i):t.addUndirectedEdgeWithKey(o,n,r,i):null==o?t.addDirectedEdge(n,r,i):t.addDirectedEdgeWithKey(o,n,r,i)}function DFSStack(t){this.graph=t,this.stack=Array(t.order),this.seen=new Set,this.size=0}function largestConnectedComponent(t){if(!isGraph(t))throw Error("graphology-components: the given graph is not a valid graphology instance.");if(!t.order)return[];var e,o=new DFSStack(t),n=o.push.bind(o),r=[];return o.forEachNodeYetUnseen(function(i){var s;for(e=[],o.push(i);0!==o.size;)s=o.pop(),e.push(s),t.forEachNeighbor(s,n);return e.length>r.length&&(r=e),r.length>o.countUnseenNodes()}),r}function largestConnectedComponentSubgraph(t){var e=largestConnectedComponent(t),o=t.nullCopy();return e.forEach(function(e){copyNode(o,e,t.getNodeAttributes(e))}),t.forEachEdge(function(t,e,n,r,i,s,a){o.hasNode(n)&&copyEdge(o,a,t,n,r,e)}),o}function subgraph(t,e){if(!isGraph(t))throw Error("graphology-operators/subgraph: invalid graph instance.");var o=t.nullCopy(),n=e;if(Array.isArray(e)){if(0===e.length)return o;e=new Set(e)}if(e instanceof Set){if(0===e.size)return o;n=function(t){return e.has(t)};var r=e;e=new Set,r.forEach(function(t){e.add(""+t)})}if("function"!=typeof n)throw Error("graphology-operators/subgraph: invalid nodes. Expecting an array or a set or a filtering function.");if("function"==typeof e){if(t.forEachNode(function(t,e){n(t,e)&&copyNode(o,t,e)}),0===o.order)return o}else e.forEach(function(e){if(!t.hasNode(e))throw Error('graphology-operators/subgraph: the "'+e+'" node was not found in the graph.');copyNode(o,e,t.getNodeAttributes(e))});return t.forEachEdge(function(t,e,r,i,s,a,h){n(r,s)&&(i===r||n(i,a))&&copyEdge(o,h,t,r,i,e)}),o}function StackSet(){this.set=new Set,this.stack=[]}function RecordStackSet(){this.set=new Set,this.stack=[]}function allSimplePaths(t,e,o,n){if(!isGraph(t))throw Error("graphology-simple-path.allSimplePaths: expecting a graphology instance.");if(!t.hasNode(e))throw Error('graphology-simple-path.allSimplePaths: expecting: could not find source node "'+e+'" in the graph.');if(!t.hasNode(o))throw Error('graphology-simple-path.allSimplePaths: expecting: could not find target node "'+o+'" in the graph.');for(var r,i,s,a="number"==typeof(n=n||{}).maxDepth?n.maxDepth:1/0,h=(e=""+e)==(o=""+o),p=[t.outboundNeighbors(e)],c=StackSet.of(e,h),u=[];0!==p.length;)if(s=(i=p[p.length-1]).pop()){if(c.has(s))continue;s===o&&(r=c.path(s),u.push(r)),c.push(s),!c.has(o)&&p.length<a?p.push(t.outboundNeighbors(s)):c.pop()}else p.pop(),c.pop();return u}DFSStack.prototype.hasAlreadySeenEverything=function(){return this.seen.size===this.graph.order},DFSStack.prototype.countUnseenNodes=function(){return this.graph.order-this.seen.size},DFSStack.prototype.forEachNodeYetUnseen=function(t){var e=this.seen,o=this.graph;o.someNode(function(n,r){return e.size===o.order||!e.has(n)&&!!t(n,r)})},DFSStack.prototype.has=function(t){return this.seen.has(t)},DFSStack.prototype.push=function(t){var e=this.seen.size;return this.seen.add(t),e!==this.seen.size&&(this.stack[this.size++]=t,!0)},DFSStack.prototype.pushWith=function(t,e){var o=this.seen.size;return this.seen.add(t),o!==this.seen.size&&(this.stack[this.size++]=e,!0)},DFSStack.prototype.pop=function(){if(0!==this.size)return this.stack[--this.size]},StackSet.prototype.has=function(t){return this.set.has(t)},StackSet.prototype.push=function(t){this.stack.push(t),this.set.add(t)},StackSet.prototype.pop=function(){this.set.delete(this.stack.pop())},StackSet.prototype.path=function(t){return this.stack.concat(t)},StackSet.of=function(t,e){var o=new StackSet;return e?o.stack.push(t):o.push(t),o},RecordStackSet.prototype.has=function(t){return this.set.has(t)},RecordStackSet.prototype.push=function(t){this.stack.push(t),this.set.add(t[1])},RecordStackSet.prototype.pop=function(){this.set.delete(this.stack.pop()[1])},RecordStackSet.prototype.path=function(t){return this.stack.slice(1).map(function(t){return t[0]}).concat([t[0]])},RecordStackSet.of=function(t,e){var o=new RecordStackSet,n=[null,t];return e?o.stack.push(n):o.push(n),o};